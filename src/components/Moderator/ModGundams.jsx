import { Table, Input, Select, Tag, Typography, Card, Space, Avatar, Button, Image } from "antd";
import { EditOutlined } from "@ant-design/icons";
import { useState } from "react";

const { Title } = Typography;
const { Option } = Select;

// D·ªØ li·ªáu gi·∫£ l·∫≠p
const gundamData = [
  {
    key: "1",
    image: "https://via.placeholder.com/50", // ·∫¢nh Gundam
    name: "RX-78-2 Gundam",
    seller: { name: "Nguy·ªÖn VƒÉn A", avatar: "https://i.pravatar.cc/32" },
    grade: "MG", // Master Grade
    series: "Mobile Suit Gundam",
    status: "C√≤n h√†ng",
  },
  {
    key: "2",
    image: "https://via.placeholder.com/50",
    name: "Gundam Barbatos",
    seller: { name: "Tr·∫ßn Th·ªã B", avatar: "https://i.pravatar.cc/32" },
    grade: "HG", // High Grade
    series: "Iron-Blooded Orphans",
    status: "H·∫øt h√†ng",
  },
  {
    key: "3",
    image: "https://via.placeholder.com/50",
    name: "Gundam Exia",
    seller: { name: "L√™ Ho√†ng C", avatar: "https://i.pravatar.cc/32" },
    grade: "RG", // Real Grade
    series: "Mobile Suit Gundam 00",
    status: "S·∫Øp c√≥ h√†ng",
  },
];

// Tr√≠ch xu·∫•t c√°c gi√° tr·ªã duy nh·∫•t cho b·ªô l·ªçc
const uniqueGrades = [...new Set(gundamData.map((item) => item.grade))];
const uniqueSeries = [...new Set(gundamData.map((item) => item.series))];
const uniqueStatuses = [...new Set(gundamData.map((item) => item.status))];

const ModGundams = () => {
  const [filteredStatus, setFilteredStatus] = useState(null);
  const [filteredGrade, setFilteredGrade] = useState(null);
  const [filteredSeries, setFilteredSeries] = useState(null);
  const [searchText, setSearchText] = useState("");

  // L·ªçc d·ªØ li·ªáu d·ª±a tr√™n t√¨m ki·∫øm & b·ªô l·ªçc
  const filteredData = gundamData.filter((item) => {
    return (
      (filteredStatus ? item.status === filteredStatus : true) &&
      (filteredGrade ? item.grade === filteredGrade : true) &&
      (filteredSeries ? item.series === filteredSeries : true) &&
      (searchText
        ? item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.seller.name.toLowerCase().includes(searchText.toLowerCase())
        : true)
    );
  });

  // H√†m render tr·∫°ng th√°i (tag m√†u)
  const getStatusTag = (status) => {
    const statusColors = {
      "C√≤n h√†ng": "green",
      "H·∫øt h√†ng": "red",
      "S·∫Øp c√≥ h√†ng": "orange",
    };
    return <Tag color={statusColors[status] || "default"}>{status}</Tag>;
  };

  // C·∫•u tr√∫c table
  const columns = [
    {
      title: " ·∫¢nh Ch√≠nh",
      dataIndex: "image",
      key: "image",
      render: (image) => <Image src={image} width={50} height={50} />,
    },
    {
      title: " T√™n Gundam",
      dataIndex: "name",
      key: "name",
    },
    {
      title: " Ng∆∞·ªùi B√°n",
      dataIndex: "seller",
      key: "seller",
      render: (seller) => (
        <Space>
          <Avatar src={seller.avatar} size={32} />
          {seller.name}
        </Space>
      ),
    },
    {
      title: " Grade",
      dataIndex: "grade",
      key: "grade",
    },
    {
      title: " Series",
      dataIndex: "series",
      key: "series",
    },
    {
      title: " Tr·∫°ng Th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => getStatusTag(status),
    },
    {
      title: " Ch·ªânh S·ª≠a",
      dataIndex: "edit",
      key: "edit",
      render: () => (
        <Button type="primary" icon={<EditOutlined />} size="small">
          S·ª≠a
        </Button>
      ),
    },
  ];

  return (
    <Card style={{ background: "#fff", padding: 24 }}>
      <Title level={3}>Qu·∫£n L√Ω Gundam</Title>

      {/* Thanh t√¨m ki·∫øm v√† b·ªô l·ªçc */}
      <Space style={{ display: "flex", justifyContent: "space-between", marginBottom: 16 }}>
        <Input.Search
          placeholder="üîç T√¨m ki·∫øm theo t√™n Gundam ho·∫∑c ng∆∞·ªùi b√°n"
          onSearch={(value) => setSearchText(value)}
          enterButton
          allowClear
          style={{ width: 300 }}
        />
        <Space>
          <Select
            placeholder="Tr·∫°ng Th√°i"
            allowClear
            onChange={setFilteredStatus}
            style={{ width: 150 }}
          >
            {uniqueStatuses.map((status) => (
              <Option key={status} value={status}>
                {status}
              </Option>
            ))}
          </Select>
          <Select
            placeholder="Grade"
            allowClear
            onChange={setFilteredGrade}
            style={{ width: 150 }}
          >
            {uniqueGrades.map((grade) => (
              <Option key={grade} value={grade}>
                {grade}
              </Option>
            ))}
          </Select>
          <Select
            placeholder="Series"
            allowClear
            onChange={setFilteredSeries}
            style={{ width: 200 }}
          >
            {uniqueSeries.map((series) => (
              <Option key={series} value={series}>
                {series}
              </Option>
            ))}
          </Select>
        </Space>
      </Space>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <Table columns={columns} dataSource={filteredData} pagination={{ pageSize: 5 }} />
    </Card>
  );
};

export default ModGundams;
