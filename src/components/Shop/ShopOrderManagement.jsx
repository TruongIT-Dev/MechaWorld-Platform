import { useEffect, useState } from "react";
import { Table, Row, Input, Tag, Button, Dropdown,Modal, message, Upload } from "antd";
import { MoreOutlined } from "@ant-design/icons";
import { getOrder,confirmOrder,packagingOrder } from "../../apis/Order/APIOrder";
import { useSelector } from "react-redux";

// Tr·∫°ng th√°i ƒë∆°n h√†ng v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
const orderStatusColors = {
  pending: "orange",
  packaging: "blue",
  delivering: "purple",
  delivered: "green",
  completed: "green",
  failed: "red",
  canceled: "red",
};

// C·ªôt d·ªØ li·ªáu c·ªßa b·∫£ng
const columns = (handleAction, handleModal, handleModalCheck) => [
  {
    title: "M√£ ƒë∆°n h√†ng",
    dataIndex: "code",
    width: 150,
  },
  // {
  //   title: "T√™n s·∫£n ph·∫©m",
  //   dataIndex: "name",
  //   width: 250,
  // },
  {
    title: "Ng∆∞·ªùi mua",
    dataIndex: "buyer_id",
    width: 100,
  },
  {
    title: "Gi√° tr·ªã ƒë∆°n h√†ng",
    dataIndex: "items_subtotal",
    width: 150,
    render: (price) => <span className="text-red-500 font-semibold">{price.toLocaleString()} ƒë</span>,
  },
  {
    title: "Ph∆∞∆°ng th·ª©c thanh to√°n",
    dataIndex: "payment_method",
    width: 110,
  },
  {
    title: "Tr·∫°ng th√°i",
    dataIndex: "status",
    key: "status",
    width: 120,
    render: (status) => (
      <Tag color={orderStatusColors[status] || "volcano"}>{status.toUpperCase()}</Tag>
    ),
  },
  {
    title: "Note",
    dataIndex: "note",
    width: 150,
  },
  {
    title: "H√†nh ƒë·ªông",
    dataIndex: "action",
    key: "action",
    width: 150,
    render: (_, record) => {
      const menuItems = [];

      if (record.status === "pending") {
        menuItems.push({ key: "accept", label: "‚úÖ Ch·∫•p nh·∫≠n ƒë∆°n h√†ng", onClick: () => handleAction(record, "accept") });
      }

      if (record.is_packaged) {
        menuItems.push({ key: "viewPackage", label: "üì¶ Xem chi ti·∫øt ƒë√≥ng g√≥i" ,onClick: () => handleModalCheck(record)});
      }

      if (record.status === "packaging" && !record.is_packaged) {
        menuItems.push({ key: "packaged", label: "üì¶ ƒê√£ ƒë√≥ng g√≥i s·∫£n ph·∫©m", onClick: () => handleModal(record) });
      }

      menuItems.push({ key: "cancel", label: "‚ùå H·ªßy ƒë∆°n h√†ng", onClick: () => handleAction(record, "cancel") });
      menuItems.push({ key: "detail", label: "Chi ti·∫øt ƒë∆°n h√†ng" });

      return (
        <Dropdown menu={{ items: menuItems }}>
          <Button icon={<MoreOutlined />} />
        </Dropdown>
      );
    },
  },
];

// D·ªØ li·ªáu ƒë∆°n h√†ng m·∫´u
const initialOrders = Array.from({ length: 10 }).map((_, i) => ({
  key: i,
  code: `BUY-GD-${i + 1}`,
  items_subtotal: 320000 + i * 10000,
  buyer_id: `Huy ${i}`,
  status: i % 3 === 0 ? "pending" : "packaging",
  payment_method: "V√≠ ƒëi·ªán t·ª≠",
  note: "ƒê∆°n h√†ng m·∫´u",
  is_packaged: i % 2 === 0,
  seller_id: "userId",
}));

function ShopOrderManagement() {
  const [orders, setOrders] = useState(initialOrders);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [OrderData, setOrderData] = useState([]);
  const userId = useSelector((state) => state.auth.user.id);
  const [isModalPackageVisible, setIsModalPackageVisible] = useState(false);
  // const [isModalDetailVisible, setIsModalDetailVisible] = useState(false);
  const [isModalPackageCheckVisible, setIsModalPackageCheckVisible] = useState(false);
  const [packagingImages, setPackagingImages] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState([]);
  const [selectedOrderImage, setSelectedOrderImage] = useState([]);

  // X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng
  const handleAction = async (record, actionKey) => {
    if (actionKey === "accept") {
      try {
        const response = await confirmOrder(record.seller_id, record.id);
        if (response.status === 200) {
          message.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n!");
          setOrders((prevOrders) =>
            prevOrders.map((order) =>
              order.key === record.key ? { ...order, status: "Accepted" } : order
            )
          );
        } else {
          message.error("Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n ƒë∆°n h√†ng!");
        }
      } catch (error) {
        console.error("Error confirming order:", error);
        message.error("ƒê√£ x·∫£y ra l·ªói khi ch·∫•p nh·∫≠n ƒë∆°n h√†ng!");
      }
    } else if (actionKey === "cancel") {
      console.log("X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng:", record);
    }
  };
  const handleModal = (record) => {
    setSelectedOrder(record);
    console.log(selectedOrder);
    setIsModalPackageVisible(true);
    console.log(isModalPackageVisible);
  }

  // L·ªçc ƒë∆°n h√†ng theo tr·∫°ng th√°i v√† t√¨m ki·∫øm s·∫£n ph·∫©m
  // const filteredOrders = orders.filter(
  //   (order) =>
  //     order.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
  //     (statusFilter ? order.status === statusFilter : true)
  // );
  
  useEffect(() => {
    const fetchOrders = async () => {
      // Gi·∫£ l·∫≠p g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng
      
      const response = await getOrder(userId);
      console.log("Orders: ", response.data);
      setOrderData(response.data);
    };

    fetchOrders();
  }
  , []);
  const handlePackagingConfirm = async (sellerId, orderId, packagingImages) => {
    try {
      console.log(packagingImages);
      const formData = new FormData();

      packagingImages.forEach((file) => {
        formData.append("package_images", file.originFileObj);
      });
  
      const response = await packagingOrder(sellerId, orderId, formData);

      console.log("Packaging response: ", response.data);
      if (response.status === 200) {
        message.success("ƒê√≥ng g√≥i th√†nh c√¥ng!");
        setIsModalPackageVisible(false);
        setTimeout(() => {
          window.location.reload();
        }, 800);
        
      } else {
        console.error("ƒê√≥ng g√≥i th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error("Error while packaging order:", error);
    }
  
  }
  const handleModalCheck = (record) => {
    // setSelectedOrderImage(record);
    setSelectedOrderImage(record.packaging_images || []);
    setIsModalPackageCheckVisible(true);
    console.log("checking data",record);
    console.log("checking data2",selectedOrderImage);

  }

  const handleSecondaryUpload = ({ fileList }) => {
    // L·ªçc danh s√°ch ·∫£nh m·ªõi ch∆∞a c√≥ trong packagingImages
    const newFiles = fileList.filter(
      (file) => !packagingImages.some((img) => img.uid === file.uid)
    );
    // N·∫øu t·ªïng s·ªë ·∫£nh m·ªõi + ·∫£nh hi·ªán t·∫°i > 5 th√¨ b√°o l·ªói
    if (packagingImages.length + newFiles.length > 5) {
      message.error("Ch·ªâ c√≥ th·ªÉ t·∫£i l√™n t·ªëi ƒëa 5 ·∫£nh ph·ª•!");
      return;
    }
    console.log("File list sau khi thay ƒë·ªïi:", fileList);
    // C·∫≠p nh·∫≠t state ch·ªâ v·ªõi ·∫£nh m·ªõi
    // setSecondaryImages([...packagingImages, ...newFiles]);
    setPackagingImages(fileList);
  };
  
  // X·ª≠ l√Ω khi x√≥a ·∫£nh
  const handleRemoveImage = (file) => {
    setPackagingImages((prevImages) => prevImages.filter((img) => img.uid !== file.uid));
    console.log("ƒë√£ x√≥a");
  };


  return (
    <div>
      {/* Ti√™u ƒë·ªÅ */}
      <h2 className="text-2xl font-semibold mb-6">Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>

      {/* Thanh c√¥ng c·ª• */}
      <Row className="mb-4 flex gap-4">
        {/* T√¨m ki·∫øm s·∫£n ph·∫©m */}
        <Input.Search
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          allowClear
          className="w-1/3"
        />

        {/* B·ªô l·ªçc tr·∫°ng th√°i */}
        <select
          className="border px-3 py-2 rounded"
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
        >
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          {Object.keys(orderStatusColors).map((status) => (
            <option key={status} value={status}>
              {status}
            </option>
          ))}
        </select>
      </Row>

      {/* B·∫£ng hi·ªÉn th·ªã ƒë∆°n h√†ng */}
      <Table
        columns={columns(handleAction, handleModal, handleModalCheck)}
        dataSource={OrderData}
        pagination={{ defaultPageSize: 10 }}
        scroll={{ y: 550 }}
      />
      {/* Modal ƒë√≥ng g√≥i s·∫£n ph·∫©m */}
      <Modal
        title="X√°c th·ª±c d·ªØ li·ªáu"
        open={isModalPackageVisible}
        onCancel={() => setIsModalPackageVisible(false)}
        footer={null}

      >
        <form
          onSubmit={(e) => {
            e.preventDefault();
            // const formData = new FormData(e.target);
            // const packagingImages = formData.getAll("packaging_images");
            handlePackagingConfirm(selectedOrder.seller_id, selectedOrder.id, packagingImages);
          }}
        >
          <p className="text-red-500 font-semibold">
            Y√™u c·∫ßu shop g·ª≠i ·∫£nh x√°c th·ª±c ƒë√£ ƒë√≥ng g√≥i s·∫£n ph·∫©m. Sau khi x√°c th·ª±c b√™n v·∫≠n chuy·ªÉn s·∫Ω b·∫Øt ƒë·∫ßu l·∫•y h√†ng n·∫øu m·∫∑t h√†ng kh√¥ng kh·ªõp v·ªõi h√¨nh ·∫£nh ƒë√£ x√°c th·ª±c th√¨ Shop s·∫Ω ch·ªãu tr√°ch nhi·ªám b·ªìi th∆∞·ªùng.
          </p>
          <div className="mt-6">
            <label className="font-bold">
              <span className="text-red-500">*</span> ·∫¢nh x√°c th·ª±c
            </label>
            <br />
            <Upload
              multiple
              listType="picture-card"
              fileList={packagingImages}
              onChange={handleSecondaryUpload}
              onRemove={handleRemoveImage}
              beforeUpload={() => false} // Kh√¥ng t·ª± ƒë·ªông upload l√™n server
              maxCount={5} // Gi·ªõi h·∫°n t·ªëi ƒëa 5 ·∫£nh
            >
              {packagingImages.length < 5 && "+ Th√™m ·∫£nh"}
            </Upload>
          </div>
          <div className="text-right  ">
            <Button type="primary" htmlType="submit" className="bg-blue-400 hover:bg-blue-700">
              X√°c th·ª±c giao h√†ng
            </Button>
          </div>
        </form>
      </Modal>
      <Modal
        title="Chi ti·∫øt ƒë∆°n h√†ng"
        open={isModalPackageCheckVisible}
        onCancel={() => setIsModalPackageCheckVisible(false)}
        footer={null}
      >
        <p>H√¨nh ·∫£nh s·∫£n ph·∫©m ƒë√≥ng g√≥i:</p>
        <br />
        <div className="grid grid-cols-2 gap-4">
          {Array.isArray(selectedOrderImage) && selectedOrderImage.map((image, index) => (
            <img
              key={index}
              src={image}
              alt={`ƒê√≥ng g√≥i ${index + 1}`}
              className="w-full h-auto rounded shadow"
            />
          ))}

        </div>
      </Modal>
    </div>
  );
}

export default ShopOrderManagement;
