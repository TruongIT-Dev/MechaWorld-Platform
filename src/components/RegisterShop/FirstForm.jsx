import { Form, Input, Button, message, Space } from "antd";
import { useEffect, useState } from "react";
import Cookies from 'js-cookie';
import { verifyToken } from '../../apis/Auth/APIAuth';
import { useSelector } from "react-redux";
import { verifyOtp, verifyPhone } from "../../apis/User/APIUserProfile";

const FirstForm = ({ form, setIsPhoneVerified }) => {

    const [user, setUser] = useState(useSelector((state) => state.auth.user));

    const [otpVisible, setOtpVisible] = useState(false);
    const [otp, setOtp] = useState("");
    const [otpCode, setOtpCode] = useState("");

    // L·∫•y Th√¥ng tin User t·ª´ Cookie
    useEffect(() => {
        const access_token = Cookies.get('access_token');
        if (access_token) {
            try {
                verifyToken(access_token).then(response => {
                    console.log(response.data);
                    setUser(response.data);
                })
            } catch (error) {
                console.error("L·ªói l·∫•y Th√¥ng tin User:", error);
            }
        }
    }, []);


    // H√†m x·ª≠ l√Ω Thay ƒë·ªïi t√™n Shop
    useEffect(() => {
        if (user?.full_name) {
            // console.log("üîÑ C·∫≠p nh·∫≠t Form Cha v·ªõi full_name:", user.full_name);
            form.setFieldsValue({ full_name: user.full_name });
        }
    }, [user, form]);


    // G·ª≠i OTP
    const handleSendOtp = async () => {
        try {
            const phoneNumber = form.getFieldValue("phone_number");
            if (!phoneNumber) {
                message.error("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi g·ª≠i OTP!");
                return;
            }

            const response = await verifyPhone(phoneNumber);
            const otpValue = response.data.otp_code; // ‚úÖ L·∫•y tr·ª±c ti·∫øp t·ª´ response

            setOtpCode(otpValue); // C·∫≠p nh·∫≠t state nh∆∞ng kh√¥ng d√πng ngay l·∫≠p t·ª©c
            console.log("‚úÖ G·ª≠i OTP Response:", response);
            console.log("otpCode t·ª´ API:", otpValue); // ‚úÖ ƒê·∫£m b·∫£o in ra ƒë√∫ng gi√° tr·ªã
            if (response.status === 200) {
                message.success({
                    content: `OTP c·ªßa b·∫°n l√†: ${otpValue}`,
                    duration: 10, // ‚è≥ Gi·ªØ th√¥ng b√°o trong 10 gi√¢y
                });

                setOtpVisible(true);
            }
        } catch (error) {
            message.error("Kh√¥ng th·ªÉ g·ª≠i OTP! Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };



    // Nh·∫≠p OTP
    const handleOtp = (value) => {
        setOtp(value); // ‚úÖ ƒê·∫£m b·∫£o nh·∫≠n gi√° tr·ªã ƒë√∫ng t·ª´ Input.OTP
        console.log("OTP nh·∫≠p v√†o:", value);
    };


    // X√°c th·ª±c OTP
    const handleVerifyOtp = async () => {
        try {
            const phoneNumber = form.getFieldValue("phone_number");
            if (!otp) {
                message.error("Vui l√≤ng nh·∫≠p m√£ OTP!");
                return;
            }

            const response = await verifyOtp(user?.id, phoneNumber, otp);
            console.log("‚úÖ X√°c th·ª±c OTP Response:", response);

            if (response.status === 200) {
                message.success("X√°c th·ª±c th√†nh c√¥ng!");
                setOtpVisible(false);
                setIsPhoneVerified(true);
            } else {
                message.error("OTP kh√¥ng ƒë√∫ng! Vui l√≤ng ki·ªÉm tra l·∫°i.");
            }
        } catch (error) {
            message.error("L·ªói khi x√°c th·ª±c OTP.");
        }
    };

    return (
        <>
            <div className="max-w-2xl mx-auto space-y-6 gap-4">

                <div className="first-form-header">
                    <h2 className="text-xl font-bold">NH·∫¨P TH√îNG TIN C·ª¶A SHOP</h2>
                    <p className="text-gray-500">
                        Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin c·ª≠a h√†ng c·ªßa b·∫°n.
                        Nh·ªØng th√¥ng tin n√†y s·∫Ω gi√∫p kh√°ch h√†ng d·ªÖ d√†ng nh·∫≠n di·ªán v√† t√¨m ki·∫øm SHOP c·ªßa b·∫°n tr√™n n·ªÅn t·∫£ng.
                    </p>
                    <p className="text-red-500 mt-2 italic text-sm">L∆∞u √Ω: T√†i kho·∫£n ng∆∞·ªùi d√πng v√† t√†i kho·∫£n Shop s·∫Ω c√≥ c√πng s·ª≠ d·ª•ng m·ªôt t√™n duy nh·∫•t.</p>
                </div>

                {/* Input full name */}
                <Form.Item
                    label={<span className="font-semibold">T√™n Shop c·ªßa b·∫°n</span>}
                    name="full_name"
                    rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi b√°n!" }]}
                >
                    <Input />
                </Form.Item>

                {/* Input phone number */}
                <Form.Item
                    label={<span className="font-semibold">S·ªë ƒëi·ªán tho·∫°i</span>}
                    name="phone_number"
                    rules={[
                        { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
                        { pattern: /^[0-9]{10}$/, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!" },
                    ]}
                >
                    <Space.Compact style={{ width: "100%" }}>
                        <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                        <Button
                            onClick={handleSendOtp}
                            type="primary"
                            className="bg-blue-500 hover:bg-blue-600"
                        >
                            G·ª≠i m√£ OTP
                        </Button>
                    </Space.Compact>
                </Form.Item>

                {otpVisible && (
                    <div className="flex items-center space-x-4 mt-4">
                        <Input.OTP
                            placeholder="Nh·∫≠p OTP"
                            maxLength={6}
                            value={otp}
                            onChange={handleOtp}
                        />
                        <Button
                            type="primary"
                            onClick={handleVerifyOtp}
                            className="bg-[#0056b3] hover:bg-[#4a90e2] text-white px-4 py-2 rounded"
                        >
                            X√°c th·ª±c
                        </Button>
                    </div>
                )}
            </div>
        </>
    );
};

export default FirstForm;
