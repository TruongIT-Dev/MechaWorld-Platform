import { Button, Form, Input, message, Modal, Select } from "antd";
import { useEffect, useState } from "react";
import axios from "axios";
import { getUserAddresses, postUserAddresses } from "../../apis/User/APIUserProfile";

const { Option } = Select;

const SecondForm = ({ user, setUser }) => {

    const [form] = Form.useForm();

    useEffect(() => {
        console.log("User info Second Form:", user);
    }, [])

    const [loading, setLoading] = useState(false);
    const [addresses, setAddresses] = useState([]);

    const [cities, setCities] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);

    const [selectedCity, setSelectedCity] = useState(null);
    const [selectedDistrict, setSelectedDistrict] = useState(null);

    const [modalVisible, setModalVisible] = useState(false);

    const [isPickupAddress, setIsPickupAddress] = useState(false);
    const [isPrimary, setIsPrimary] = useState(true);

    // const user = useSelector((state) => state.auth.user);
    const ghn_api = 'https://dev-online-gateway.ghn.vn/shiip/public-api/master-data/';

    const api = axios.create({
        baseURL: ghn_api,
        headers: {
            'Content-Type': 'application/json',
            'token': import.meta.env.VITE_GHN_TOKEN_API
        }
    });


    useEffect(() => {
        const fetchUserAddresses = async () => {
            try {
                // setLoading(true);
                const response = await getUserAddresses(user?.id);
                setAddresses(response?.data);

                console.log("Fetch User Address:", response);

            } catch (error) {
                console.error('L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchUserAddresses();
    }, [])


    // H√†m Submit th√™m ƒê·ªãa ch·ªâ m·ªõi
    const handleAddNewAddress = async (values) => {

        console.log("Submit Form:", values);


        const city = cities.find(city => city.ProvinceID === values.city);
        const district = districts.find(district => district.DistrictID === values.district);
        const ward = wards.find(ward => ward.WardCode === values.ward);

        const addressData = {
            full_name: user.full_name,
            phone_number: user.phone_number,
            
            detail: values.address,
            ghn_ward_code: values.ward,
            ghn_district_id: values.district,

            ward_name: ward ? ward.WardName : "",
            province_name: city ? city.ProvinceName : "",
            district_name: district ? district.DistrictName : "",
            
            
            is_pickup_address: isPickupAddress,
            is_primary: isPrimary
        };

        try {
            await postUserAddresses(user?.id, addressData);

            // console.log("Submit New address:", response);

            message.success("Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
            // fetchUserAddresses();
            // setIsModalVisible(false);
            form.resetFields();
            setIsPickupAddress(false);
            setIsPrimary(true);
        } catch (error) {
            message.error("L·ªói khi th√™m ƒë·ªãa ch·ªâ!");
            console.error(error);
        }
    };

    // Fetch List t·∫•t c·∫£ Th√†nh ph·ªë khi kh·ªüi ch·∫°y Component
    useEffect(() => {
        fetchProvinces();
    }, []);


    // Fetch API List Th√†nh Ph·ªë
    const fetchProvinces = async () => {
        try {
            const response = await api.get(`province`);
            let data = response.data.data;
            data = data.filter(province => province.ProvinceID !== 286);
            setCities(data);
        } catch (error) {
            console.error('L·ªói khi fetch th√†nh ph·ªë:', error);
        }
    };


    // Fetch API List Qu·∫≠n/huy·ªán
    const fetchDistricts = async (province_id) => {
        try {
            const response = await api.post(`district`, { province_id });
            setDistricts(response.data.data);
        } catch (error) {
            console.error('L·ªói khi fetch qu·∫≠n:', error);
        }
    };


    // Fetch API List Ph∆∞·ªùng/x√£
    const fetchWards = async (district_id) => {
        try {
            const response = await api.post(`ward`, { district_id });
            setWards(response.data.data);
        } catch (error) {
            console.error('L·ªói khi fetch ph∆∞·ªùng/x√£:', error);
        }
    };

    const handleCityChange = (value) => {
        setSelectedCity(value);
        setDistricts([]);
        setWards([]);
        fetchDistricts(value);
    };

    const handleDistrictChange = (value) => {
        setSelectedDistrict(value);
        setWards([]);
        fetchWards(value);
    };


    return (
        <>
            <div className="max-w-2xl mx-auto">
                <h2 className="text-xl font-bold">TH√îNG TIN ƒê·ªäA CH·ªà L·∫§Y H√ÄNG</h2>
                <p className="text-gray-500">
                    Ch√∫ng t√¥i c√≥ ƒë·ªãa ch·ªâ l·∫•y h√†ng c·ªßa b·∫°n ƒë·ªÉ th·ª±c hi·ªán vi·ªác v·∫≠n chuy·ªÉn d·ªÖ d√†ng h∆°n.
                </p>
                <p className="text-red-500 italic text-sm">
                    L∆∞u √Ω: Ch·ªâ ghi nh·∫≠n 1 ƒë·ªãa ch·ªâ duy nh·∫•t.
                </p>

                {user?.address ? (
                    <div className="border p-4 rounded bg-gray-100 mt-4">
                        <p className="font-semibold">ƒê·ªãa ch·ªâ c·ªßa b·∫°n:</p>
                        <p>{user.address}, {user.ward}, {user.district}, {user.city}</p>
                        <Button type="link" onClick={() => setModalVisible(true)}>Ch·ªânh s·ª≠a</Button>
                    </div>
                ) : (
                    <>
                        <div className="mt-4">
                            <p className="font-semibold">B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ</p>
                        </div>

                        <Button type="primary" className="mt-4 bg-blue-500" onClick={() => setModalVisible(true)}>
                            + Th√™m m·ªõi ƒë·ªãa ch·ªâ
                        </Button>
                    </>

                )}

                {/* Modal nh·∫≠p ƒë·ªãa ch·ªâ */}
                <Modal
                    title="Th√™m ƒë·ªãa ch·ªâ m·ªõi"
                    open={modalVisible}
                    onCancel={() => setModalVisible(false)}
                    footer={[
                        <Button key="cancel" onClick={() => setModalVisible(false)}>H·ªßy</Button>,
                        <Button
                            key="submit"
                            className="bg-blue-500"
                            type="primary"
                            onClick={async () => {
                                try {
                                    const values = await form.validateFields();
                                    console.log("üìå D·ªØ li·ªáu t·ª´ Form:", values); // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ªçi API
                                    handleAddNewAddress(values);
                                } catch (error) {
                                    console.error("‚ùå Validation Error:", error);
                                }
                            }}

                        >L∆∞u</Button>,
                    ]}
                >
                    <Form
                        form={form}
                        layout="horizontal"
                        labelCol={{
                            span: 6,
                        }}
                        wrapperCol={{
                            span: 16,
                        }}
                    >
                        {/* Ch·ªçn Th√†nh ph·ªë */}
                        <Form.Item label="T·ªânh/Th√†nh ph·ªë" name="city" rules={[{ required: true }]}>
                            <Select onChange={handleCityChange} placeholder="Ch·ªçn th√†nh ph·ªë">
                                {cities.map((city) => (
                                    <Option key={city.ProvinceID} value={city.ProvinceID}>
                                        {city.ProvinceName}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>

                        {/* Ch·ªçn Qu·∫≠n/huy·ªán */}
                        <Form.Item label="Qu·∫≠n/Huy·ªán" name="district" rules={[{ required: true }]}>
                            <Select onChange={handleDistrictChange} placeholder="Ch·ªçn qu·∫≠n/huy·ªán" disabled={!selectedCity}>
                                {districts.map((district) => (
                                    <Option key={district.DistrictID} value={district.DistrictID}>
                                        {district.DistrictName}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>

                        {/* Ch·ªçn Ph∆∞·ªùng/x√£ */}
                        <Form.Item label="Ph∆∞·ªùng/X√£" name="ward" rules={[{ required: true }]}>
                            <Select placeholder="Ch·ªçn ph∆∞·ªùng/x√£" disabled={!selectedDistrict}>
                                {wards.map((ward) => (
                                    <Option key={ward.WardCode} value={ward.WardCode}>
                                        {ward.WardName}
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>

                        {/* Nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ */}
                        <Form.Item label="ƒê·ªãa ch·ªâ c·ª• th·ªÉ" name="address" rules={[{ required: true }]}>
                            <Input placeholder="Nh·∫≠p s·ªë nh√†, t√™n ƒë∆∞·ªùng" />
                        </Form.Item>
                    </Form>
                </Modal>
            </div>


            {/* <div className="max-w-2xl mx-auto">
                <div className="second-form-header">
                    <h2 className="text-xl font-bold">NH·∫¨P TH√îNG TIN L·∫§Y H√ÄNG</h2>
                    <p className="text-gray-500">
                        ƒê·ªãa ch·ªâ n∆°i thu·∫≠n ti·ªán nh·∫•t c·ªßa b·∫°n ƒë·ªÉ d·ªãch v·ª• giao h√†ng c·ªßa ch√∫ng t√¥i c√≥ th·ªÉ ƒë·∫øn l·∫•y h√†ng v√† ti·∫øn h√†nh giao h√†ng.
                    </p>
                    <p className="text-red-500 italic text-sm">L∆∞u √Ω: Ch·ªâ ghi nh·∫≠n 1 ƒë·ªãa ch·ªâ duy nh·∫•t.</p>
                </div>

               
                <div className="grid grid-cols-3 gap-4 mt-4">
                  
                    <Form.Item
                        label={<span className="font-semibold">T·ªânh/Th√†nh ph·ªë</span>}
                        name="city"
                        rules={[{ required: true }]}>
                        <Select onChange={handleCityChange} placeholder="Ch·ªçn th√†nh ph·ªë">
                            {cities.map((city) => (
                                <Option key={city.ProvinceID} value={city.ProvinceID}>
                                    {city.ProvinceName}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>

                   
                    <Form.Item
                        label={<span className="font-semibold">Qu·∫≠n/Huy·ªán</span>}
                        name="district"
                        rules={[{ required: true }]}>
                        <Select onChange={handleDistrictChange} placeholder="Ch·ªçn qu·∫≠n/huy·ªán" disabled={!selectedCity}>
                            {districts.map((district) => (
                                <Option key={district.DistrictID} value={district.DistrictID}>
                                    {district.DistrictName}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>

                  
                    <Form.Item
                        label={<span className="font-semibold">Ph∆∞·ªùng/X√£</span>}
                        name="ward"
                        rules={[{ required: true }]}>
                        <Select placeholder="Ch·ªçn ph∆∞·ªùng/x√£" disabled={!selectedDistrict}>
                            {wards.map((ward) => (
                                <Option key={ward.WardCode} value={ward.WardCode}>
                                    {ward.WardName}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>
                </div>

             
                <Form.Item
                    label={<span className="font-semibold">ƒê·ªãa ch·ªâ c·ª• th·ªÉ (S·ªë nh√†, t√™n ƒë∆∞·ªùng)</span>}
                    name="address"
                    rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ!" }]}
                >
                    <Input placeholder="V√≠ d·ª•: 123/32 H√≤a B√¨nh" />
                </Form.Item>
            </div> */}
        </>
    );
};

export default SecondForm;
