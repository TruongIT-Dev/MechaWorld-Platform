import Cookies from 'js-cookie';
import { useSelector } from "react-redux";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Steps, Button, Form, message } from "antd";
import { ShopOutlined ,TruckOutlined, ContainerOutlined, FileDoneOutlined } from "@ant-design/icons";

import FirstForm from "./FirstForm";
import SecondForm from "./SecondForm";
import ThirdForm from "./ThirdForm";
import FourthForm from "./FourthForm";

import { verifyToken } from '../../apis/Auth/APIAuth';
import { BecomeSeller, updateUserData } from "../../apis/User/APIUserProfile";

const { Step } = Steps;

export default function RegisterShop() {

  const navigate = useNavigate();
  const [form] = Form.useForm();

  const [current, setCurrent] = useState(0);

  const [user, setUser] = useState(useSelector((state) => state.auth.user));

  const [formData, setFormData] = useState({
    full_name: "",
    phone_number: "",
    address: "",
    agreedToTerms: false,
  });
  const [isPhoneVerified, setIsPhoneVerified] = useState(false);
  const [canProceed, setCanProceed] = useState(true);

  // console.log("formData", formData);

  const steps = [
    {
      title: "Th√¥ng tin Shop",
      icon: <ShopOutlined />,
      content: <FirstForm
        form={form}
        setIsPhoneVerified={setIsPhoneVerified}
      />,
    },
    {
      title: "C√†i ƒë·∫∑t v·∫≠n chuy·ªÉn",
      icon: <TruckOutlined />,
      content: <SecondForm
        user={user}
      />,
    },
    {
      title: "ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng",
      icon: <ContainerOutlined />,
      content: <ThirdForm
        formData={formData}
        setFormData={setFormData}
        setCanProceed={setCanProceed}
      />,
    },
    {
      title: "Ho√†n t·∫•t",
      icon: <FileDoneOutlined />,
      content: <FourthForm />,
    },
  ];


  // L·∫•y Th√¥ng tin User t·ª´ Cookie
  useEffect(() => {
    const access_token = Cookies.get('access_token');
    if (access_token) {
      try {
        verifyToken(access_token).then(response => {
          setUser(response.data);

          // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
          if (response.data.phone_number) {
            setIsPhoneVerified(true);
          }
        });
      } catch (error) {
        console.error("L·ªói l·∫•y Th√¥ng tin User:", error);
      }
    }
  }, []);


  // H√†m btn Next - Prev
  const next = async () => {

    try {
      const values = await form.validateFields();

      if (current === 0) {
        // üü¢ G·ªçi API c·∫≠p nh·∫≠t Th√¥ng tin Shop
        await updateUserData(user?.id, values.full_name);

      } else if (current === 1) {
        // üü¢ G·ªçi API c·∫≠p nh·∫≠t C√†i ƒë·∫∑t v·∫≠n chuy·ªÉn
        console.log("Form 2 done");

      } else if (current === 2) {
        // üü¢ G·ªçi API c·∫≠p nh·∫≠t ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
        await BecomeSeller();
      }

      // N·∫øu API th√†nh c√¥ng th√¨ m·ªõi chuy·ªÉn b∆∞·ªõc
      setCurrent((prev) => prev + 1);

    } catch (err) {
      console.error("Validation Failed:", err);
      message.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!");
    }
  };

  const prev = () => setCurrent((prev) => prev - 1);


  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      console.log("G·ª≠i d·ªØ li·ªáu:", values);

      message.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Chuy·ªÉn v·ªÅ trang ch·ªß...");
      setTimeout(() => {
        navigate("/shop/dashboard");
        window.location.reload();
      }, 2000);

    } catch (err) {
      console.error("Validation Failed:", err);
      message.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!");
    }
  };

  return (
    <div className="container mx-auto p-6 bg-white">
      <Steps
        current={current}
        // onChange={setCurrent}
        // progressDot
        className="max-w-5xl mx-auto mb-6"
      >
        {steps.map((step, index) => (
          <Step key={index} title={step.title} icon={step.icon} />
        ))}
      </Steps>

      <Form
        form={form}
        layout="horizontal"
        labelCol={{
          span: 6,
        }}
        wrapperCol={{
          span: 12,
        }}
        initialValues={formData}>
        <div className="p-4 my-10 mx-auto max-w-5xl">
          {steps[current].content}
        </div>

        <div className="flex justify-end mt-6">
          {current > 0 && <Button onClick={prev}>Quay l·∫°i</Button>}
          {current < steps.length - 1 ? (
            <Button type="primary" disabled={!canProceed || !isPhoneVerified} onClick={next} className="bg-blue-500 mx-4 hover:bg-blue-600">
              Ti·∫øp theo
            </Button>
          ) : (
            <Button type="primary" onClick={handleSubmit} className="bg-green-500 mx-4 hover:bg-green-600">
              ƒê·∫øn Shop c·ªßa b·∫°n
            </Button>
          )}
        </div>
      </Form>
    </div>
  );
}
